import { z } from "zod";
import { eq, and, desc } from "drizzle-orm";
import { TRPCError } from "@trpc/server";

import { createTRPCRouter, protectedProcedure, getUserOrgId } from "@/server/api/trpc";
import { db } from "@/db";
import { lookup_tables, lookup_table_rows, LookupTableStatus } from "@/db/schema/lookup_table";
import { variables } from "@/db/schema/variable";

// Zod schemas for validation
const createLookupTableSchema = z.object({
  name: z.string().min(1, "Name is required").max(255),
  description: z.string().optional(),
  inputVariableId: z.string().uuid("Invalid input variable ID"),
  outputName: z.string().min(1, "Output name is required").max(255),
  outputDataType: z.enum(["string", "number", "boolean", "date"]),
  defaultValue: z.string().optional(),
});

const updateLookupTableSchema = z.object({
  uuid: z.string().uuid(),
  name: z.string().min(1, "Name is required").max(255).optional(),
  description: z.string().optional(),
  inputVariableId: z.string().uuid("Invalid input variable ID").optional(),
  outputName: z.string().min(1, "Output name is required").max(255).optional(),
  outputDataType: z.enum(["string", "number", "boolean", "date"]).optional(),
  defaultValue: z.string().optional(),
});

const createLookupTableRowSchema = z.object({
  lookupTableId: z.string().uuid(),
  inputCondition: z.string().optional(),
  inputValue: z.string().min(1, "Input value is required"),
  outputValue: z.string().min(1, "Output value is required"),
  order: z.number().int().min(0).default(0),
  isDefault: z.boolean().default(false),
});

const updateLookupTableRowSchema = z.object({
  uuid: z.string().uuid(),
  inputCondition: z.string().optional(),
  inputValue: z.string().min(1, "Input value is required").optional(),
  outputValue: z.string().min(1, "Output value is required").optional(),
  order: z.number().int().min(0).optional(),
  isDefault: z.boolean().optional(),
});

const batchUpdateRowsSchema = z.object({
  lookupTableId: z.string().uuid(),
  rows: z.array(z.object({
    uuid: z.string().uuid().optional(), // Optional for new rows
    inputCondition: z.string().optional(),
    inputValue: z.string().min(1, "Input value is required"),
    outputValue: z.string().min(1, "Output value is required"),
    order: z.number().int().min(0).default(0),
    isDefault: z.boolean().default(false),
    _action: z.enum(["create", "update", "delete"]).optional(),
  })),
});

export const lookupTableRouter = createTRPCRouter({
  // Get all lookup tables
  getAll: protectedProcedure.query(async ({ ctx }) => {
    try {
      // ðŸ”’ SECURITY FIX: Get org from authenticated user context
      const orgId = await getUserOrgId(ctx.session.user.id);

      const lookupTables = await db
        .select({
          id: lookup_tables.id,
          uuid: lookup_tables.uuid,
          name: lookup_tables.name,
          description: lookup_tables.description,
          inputVariableId: lookup_tables.inputVariableId,
          outputName: lookup_tables.outputName,
          outputDataType: lookup_tables.outputDataType,
          defaultValue: lookup_tables.defaultValue,
          version: lookup_tables.version,
          status: lookup_tables.status,
          publishedAt: lookup_tables.publishedAt,
          publishedBy: lookup_tables.publishedBy,
          orgId: lookup_tables.orgId,
          createdAt: lookup_tables.createdAt,
          updatedAt: lookup_tables.updatedAt,
          // Include input variable name for display
          inputVariableName: variables.name,
        })
        .from(lookup_tables)
        .leftJoin(variables, eq(lookup_tables.inputVariableId, variables.uuid))
        .where(eq(lookup_tables.orgId, orgId))
        .orderBy(desc(lookup_tables.updatedAt));

      return lookupTables;
    } catch (error) {
      console.error("Error fetching lookup tables:", error);
      throw new TRPCError({
        code: "INTERNAL_SERVER_ERROR",
        message: "Failed to fetch lookup tables",
      });
    }
  }),

  // Get lookup table by UUID with rows
  getByUuid: protectedProcedure
    .input(z.string().uuid())
    .query(async ({ input: uuid, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId with actual org from context
        const orgId = 1;

        // Get the lookup table
        const lookupTable = await db
          .select({
            id: lookup_tables.id,
            uuid: lookup_tables.uuid,
            name: lookup_tables.name,
            description: lookup_tables.description,
            inputVariableId: lookup_tables.inputVariableId,
            outputName: lookup_tables.outputName,
            outputDataType: lookup_tables.outputDataType,
            defaultValue: lookup_tables.defaultValue,
            version: lookup_tables.version,
            status: lookup_tables.status,
            publishedAt: lookup_tables.publishedAt,
            publishedBy: lookup_tables.publishedBy,
            orgId: lookup_tables.orgId,
            createdAt: lookup_tables.createdAt,
            updatedAt: lookup_tables.updatedAt,
            // Include input variable name for display
            inputVariableName: variables.name,
          })
          .from(lookup_tables)
          .leftJoin(variables, eq(lookup_tables.inputVariableId, variables.uuid))
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (lookupTable.length === 0) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Lookup table not found",
          });
        }

        // Get the rows for this lookup table
        const rows = await db
          .select()
          .from(lookup_table_rows)
          .where(eq(lookup_table_rows.lookupTableId, uuid))
          .orderBy(lookup_table_rows.order, lookup_table_rows.createdAt);

        return {
          ...lookupTable[0],
          rows,
        };
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error fetching lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to fetch lookup table",
        });
      }
    }),

  // Create new lookup table
  create: protectedProcedure
    .input(createLookupTableSchema)
    .mutation(async ({ input, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId with actual org from context
        const orgId = 1;

        // Verify the input variable exists and is published
        const inputVariable = await db
          .select()
          .from(variables)
          .where(and(
            eq(variables.uuid, input.inputVariableId),
            eq(variables.orgId, orgId)
          ))
          .limit(1);

        if (inputVariable.length === 0) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Input variable not found",
          });
        }

        if (inputVariable[0].status !== "published") {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Input variable must be published to be used in lookup tables",
          });
        }

        // Check for duplicate name within org
        const existingTable = await db
          .select()
          .from(lookup_tables)
          .where(and(
            eq(lookup_tables.name, input.name),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (existingTable.length > 0) {
          throw new TRPCError({
            code: "CONFLICT",
            message: "A lookup table with this name already exists",
          });
        }

        const result = await db
          .insert(lookup_tables)
          .values({
            name: input.name,
            description: input.description,
            inputVariableId: input.inputVariableId,
            outputName: input.outputName,
            outputDataType: input.outputDataType,
            defaultValue: input.defaultValue,
            orgId,
            status: LookupTableStatus.DRAFT,
            version: 1,
          })
          .returning();

        return result[0];
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error creating lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to create lookup table",
        });
      }
    }),

  // Update lookup table
  update: protectedProcedure
    .input(updateLookupTableSchema)
    .mutation(async ({ input, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId with actual org from context
        const orgId = 1;

        // Check if lookup table exists and is editable
        const existingTable = await db
          .select()
          .from(lookup_tables)
          .where(and(
            eq(lookup_tables.uuid, input.uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (existingTable.length === 0) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Lookup table not found",
          });
        }

        if (existingTable[0].status !== LookupTableStatus.DRAFT) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Only draft lookup tables can be updated",
          });
        }

        // If updating input variable, verify it exists and is published
        if (input.inputVariableId) {
          const inputVariable = await db
            .select()
            .from(variables)
            .where(and(
              eq(variables.uuid, input.inputVariableId),
              eq(variables.orgId, orgId)
            ))
            .limit(1);

          if (inputVariable.length === 0) {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Input variable not found",
            });
          }

          if (inputVariable[0].status !== "published") {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Input variable must be published to be used in lookup tables",
            });
          }
        }

        // Check for duplicate name if name is being updated
        if (input.name && input.name !== existingTable[0].name) {
          const duplicateTable = await db
            .select()
            .from(lookup_tables)
            .where(and(
              eq(lookup_tables.name, input.name),
              eq(lookup_tables.orgId, orgId)
            ))
            .limit(1);

          if (duplicateTable.length > 0) {
            throw new TRPCError({
              code: "CONFLICT",
              message: "A lookup table with this name already exists",
            });
          }
        }

        const { uuid, ...updateData } = input;
        const result = await db
          .update(lookup_tables)
          .set({
            ...updateData,
            updatedAt: new Date(),
          })
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .returning();

        return result[0];
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error updating lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to update lookup table",
        });
      }
    }),

  // Delete lookup table
  delete: protectedProcedure
    .input(z.string().uuid())
    .mutation(async ({ input: uuid, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId with actual org from context
        const orgId = 1;

        // Check if lookup table exists and is deletable
        const existingTable = await db
          .select()
          .from(lookup_tables)
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (existingTable.length === 0) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Lookup table not found",
          });
        }

        if (existingTable[0].status !== LookupTableStatus.DRAFT) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Only draft lookup tables can be deleted",
          });
        }

        // Check if any variables reference this lookup table
        const referencingVariables = await db
          .select()
          .from(variables)
          .where(and(
            eq(variables.lookupTableId, uuid),
            eq(variables.orgId, orgId)
          ))
          .limit(1);

        if (referencingVariables.length > 0) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Cannot delete lookup table that is referenced by variables",
          });
        }

        await db
          .delete(lookup_tables)
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ));

        return { success: true };
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error deleting lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to delete lookup table",
        });
      }
    }),

  // Publish lookup table
  publish: protectedProcedure
    .input(z.object({ uuid: z.string().uuid() }))
    .mutation(async ({ input, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId and userId with actual values from context
        const orgId = 1;
        const userId = 1; // TODO: Get from ctx.session.user.id

        const existingTable = await db
          .select()
          .from(lookup_tables)
          .where(and(
            eq(lookup_tables.uuid, input.uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (existingTable.length === 0) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Lookup table not found",
          });
        }

        if (existingTable[0].status !== LookupTableStatus.DRAFT) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Only draft lookup tables can be published",
          });
        }

        // Verify the lookup table has at least one row
        const rowCount = await db
          .select({ count: lookup_table_rows.id })
          .from(lookup_table_rows)
          .where(eq(lookup_table_rows.lookupTableId, input.uuid));

        if (rowCount.length === 0) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Lookup table must have at least one row before publishing",
          });
        }

        const result = await db
          .update(lookup_tables)
          .set({
            status: LookupTableStatus.PUBLISHED,
            version: existingTable[0].version + 1,
            publishedAt: new Date(),
            publishedBy: userId,
            updatedAt: new Date(),
          })
          .where(and(
            eq(lookup_tables.uuid, input.uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .returning();

        return result[0];
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error publishing lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to publish lookup table",
        });
      }
    }),

  // Deprecate lookup table
  deprecate: protectedProcedure
    .input(z.string().uuid())
    .mutation(async ({ input: uuid, ctx }) => {
      try {
        // TODO: Replace hardcoded orgId with actual org from context
        const orgId = 1;

        const existingTable = await db
          .select()
          .from(lookup_tables)
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .limit(1);

        if (existingTable.length === 0) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Lookup table not found",
          });
        }

        if (existingTable[0].status !== LookupTableStatus.PUBLISHED) {
          throw new TRPCError({
            code: "BAD_REQUEST",
            message: "Only published lookup tables can be deprecated",
          });
        }

        const result = await db
          .update(lookup_tables)
          .set({
            status: LookupTableStatus.DEPRECATED,
            updatedAt: new Date(),
          })
          .where(and(
            eq(lookup_tables.uuid, uuid),
            eq(lookup_tables.orgId, orgId)
          ))
          .returning();

        return result[0];
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }
        console.error("Error deprecating lookup table:", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to deprecate lookup table",
        });
      }
    }),

  // Row management endpoints
  rows: createTRPCRouter({
    // Create lookup table row
    create: protectedProcedure
      .input(createLookupTableRowSchema)
      .mutation(async ({ input, ctx }) => {
        try {
          // TODO: Replace hardcoded orgId with actual org from context
          const orgId = 1;

          // Verify the lookup table exists and is editable
          const lookupTable = await db
            .select()
            .from(lookup_tables)
            .where(and(
              eq(lookup_tables.uuid, input.lookupTableId),
              eq(lookup_tables.orgId, orgId)
            ))
            .limit(1);

          if (lookupTable.length === 0) {
            throw new TRPCError({
              code: "NOT_FOUND",
              message: "Lookup table not found",
            });
          }

          if (lookupTable[0].status !== LookupTableStatus.DRAFT) {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Can only add rows to draft lookup tables",
            });
          }

          const result = await db
            .insert(lookup_table_rows)
            .values(input)
            .returning();

          return result[0];
        } catch (error) {
          if (error instanceof TRPCError) {
            throw error;
          }
          console.error("Error creating lookup table row:", error);
          throw new TRPCError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to create lookup table row",
          });
        }
      }),

    // Update lookup table row
    update: protectedProcedure
      .input(updateLookupTableRowSchema)
      .mutation(async ({ input, ctx }) => {
        try {
          // TODO: Replace hardcoded orgId with actual org from context
          const orgId = 1;

          // Get the row and verify the lookup table is editable
          const row = await db
            .select({
              rowId: lookup_table_rows.id,
              lookupTableId: lookup_table_rows.lookupTableId,
              status: lookup_tables.status,
            })
            .from(lookup_table_rows)
            .innerJoin(lookup_tables, eq(lookup_table_rows.lookupTableId, lookup_tables.uuid))
            .where(and(
              eq(lookup_table_rows.uuid, input.uuid),
              eq(lookup_tables.orgId, orgId)
            ))
            .limit(1);

          if (row.length === 0) {
            throw new TRPCError({
              code: "NOT_FOUND",
              message: "Lookup table row not found",
            });
          }

          if (row[0].status !== LookupTableStatus.DRAFT) {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Can only update rows in draft lookup tables",
            });
          }

          const { uuid, ...updateData } = input;
          const result = await db
            .update(lookup_table_rows)
            .set({
              ...updateData,
              updatedAt: new Date(),
            })
            .where(eq(lookup_table_rows.uuid, uuid))
            .returning();

          return result[0];
        } catch (error) {
          if (error instanceof TRPCError) {
            throw error;
          }
          console.error("Error updating lookup table row:", error);
          throw new TRPCError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to update lookup table row",
          });
        }
      }),

    // Delete lookup table row
    delete: protectedProcedure
      .input(z.string().uuid())
      .mutation(async ({ input: uuid, ctx }) => {
        try {
          // TODO: Replace hardcoded orgId with actual org from context
          const orgId = 1;

          // Get the row and verify the lookup table is editable
          const row = await db
            .select({
              rowId: lookup_table_rows.id,
              lookupTableId: lookup_table_rows.lookupTableId,
              status: lookup_tables.status,
            })
            .from(lookup_table_rows)
            .innerJoin(lookup_tables, eq(lookup_table_rows.lookupTableId, lookup_tables.uuid))
            .where(and(
              eq(lookup_table_rows.uuid, uuid),
              eq(lookup_tables.orgId, orgId)
            ))
            .limit(1);

          if (row.length === 0) {
            throw new TRPCError({
              code: "NOT_FOUND",
              message: "Lookup table row not found",
            });
          }

          if (row[0].status !== LookupTableStatus.DRAFT) {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Can only delete rows from draft lookup tables",
            });
          }

          await db
            .delete(lookup_table_rows)
            .where(eq(lookup_table_rows.uuid, uuid));

          return { success: true };
        } catch (error) {
          if (error instanceof TRPCError) {
            throw error;
          }
          console.error("Error deleting lookup table row:", error);
          throw new TRPCError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to delete lookup table row",
          });
        }
      }),

    // Batch update rows (for CSV import or bulk editing)
    batchUpdate: protectedProcedure
      .input(batchUpdateRowsSchema)
      .mutation(async ({ input, ctx }) => {
        try {
          // TODO: Replace hardcoded orgId with actual org from context
          const orgId = 1;

          // Verify the lookup table exists and is editable
          const lookupTable = await db
            .select()
            .from(lookup_tables)
            .where(and(
              eq(lookup_tables.uuid, input.lookupTableId),
              eq(lookup_tables.orgId, orgId)
            ))
            .limit(1);

          if (lookupTable.length === 0) {
            throw new TRPCError({
              code: "NOT_FOUND",
              message: "Lookup table not found",
            });
          }

          if (lookupTable[0].status !== LookupTableStatus.DRAFT) {
            throw new TRPCError({
              code: "BAD_REQUEST",
              message: "Can only update rows in draft lookup tables",
            });
          }

          const results = [];

          for (const row of input.rows) {
            if (row._action === "delete" && row.uuid) {
              await db
                .delete(lookup_table_rows)
                .where(eq(lookup_table_rows.uuid, row.uuid));
              results.push({ action: "delete", uuid: row.uuid });
            } else if (row._action === "update" && row.uuid) {
              const { uuid, _action, ...updateData } = row;
              const result = await db
                .update(lookup_table_rows)
                .set({
                  ...updateData,
                  updatedAt: new Date(),
                })
                .where(eq(lookup_table_rows.uuid, uuid))
                .returning();
              results.push({ action: "update", data: result[0] });
            } else if (row._action === "create" || !row.uuid) {
              const { uuid, _action, ...createData } = row;
              const result = await db
                .insert(lookup_table_rows)
                .values({
                  ...createData,
                  lookupTableId: input.lookupTableId,
                })
                .returning();
              results.push({ action: "create", data: result[0] });
            }
          }

          return { success: true, results };
        } catch (error) {
          if (error instanceof TRPCError) {
            throw error;
          }
          console.error("Error batch updating lookup table rows:", error);
          throw new TRPCError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to batch update lookup table rows",
          });
        }
      }),
  }),

  // Get published lookup tables for variable selection
  getPublishedForSelection: protectedProcedure.query(async ({ ctx }) => {
    try {
      // TODO: Replace hardcoded orgId with actual org from context
      const orgId = 1;

      const publishedTables = await db
        .select({
          uuid: lookup_tables.uuid,
          name: lookup_tables.name,
          description: lookup_tables.description,
          outputName: lookup_tables.outputName,
          outputDataType: lookup_tables.outputDataType,
        })
        .from(lookup_tables)
        .where(and(
          eq(lookup_tables.orgId, orgId),
          eq(lookup_tables.status, LookupTableStatus.PUBLISHED)
        ))
        .orderBy(lookup_tables.name);

      return publishedTables;
    } catch (error) {
      console.error("Error fetching published lookup tables:", error);
      throw new TRPCError({
        code: "INTERNAL_SERVER_ERROR",
        message: "Failed to fetch published lookup tables",
      });
    }
  }),
}); 